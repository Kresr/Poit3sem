; Listing generated by Microsoft (R) Optimizing Compiler Version 19.37.32824.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__2972590E_concurrencysal@h DB 01H
__196CC136_sal@h DB 01H
__C395F66A_vadefs@h DB 01H
__D5C25611_vcruntime@h DB 01H
__311F130C_xkeycheck@h DB 01H
__AEBEEEE9_yvals_core@h DB 01H
__05EEB633_limits@h DB 01H
__7CE37BCF_climits DB 01H
__1B0272D9_corecrt@h DB 01H
__D5F74309_vcruntime_new@h DB 01H
__ED298667_vcruntime_new_debug@h DB 01H
__935DC21B_crtdbg@h DB 01H
__B40C025A_crtdefs@h DB 01H
__97CA0262_use_ansi@h DB 01H
__4E4CEF82_yvals@h DB 01H
__BB16330F_corecrt_math@h DB 01H
__3BF2A406_math@h DB 01H
__45DED006_corecrt_malloc@h DB 01H
__13F5961F_stddef@h DB 01H
__FD6DBD68_corecrt_search@h DB 01H
__E2E33A61_corecrt_wstdlib@h DB 01H
__6E5ACABA_stdlib@h DB 01H
__F80C593D_cstdlib DB 01H
__6CC4302B_xtr1common DB 01H
__7178C802_intrin0@inl@h DB 01H
__AD21BB51_intrin0@h DB 01H
__7BD6CF81_cmath DB 01H
__44420885_corecrt_stdio_config@h DB 01H
__AB601D8D_corecrt_wstdio@h DB 01H
__C1EC35D3_stdio@h DB 01H
__FAE305CF_cstdio DB 01H
__61CC25A1_errno@h DB 01H
__4BC88476_vcruntime_string@h DB 01H
__E4C945B4_corecrt_memcpy_s@h DB 01H
__8EAFF484_corecrt_memory@h DB 01H
__6490AEC5_corecrt_wstring@h DB 01H
__E8295E1E_string@h DB 01H
__B49EF1DD_cstring DB 01H
__EF1F6BBA_corecrt_wconio@h DB 01H
__74484FB3_corecrt_wctype@h DB 01H
__3D1D430C_corecrt_wdirect@h DB 01H
__8ECB7138_corecrt_share@h DB 01H
__DB7FEBA6_corecrt_wio@h DB 01H
__9A9F0068_corecrt_wprocess@h DB 01H
__369A9BC3_corecrt_wtime@h DB 01H
__CE789B9D_types@h DB 01H
__9901C817_stat@h DB 01H
__3FCAD62E_wchar@h DB 01H
__6068D39C_cwchar DB 01H
__23A856AA_iosfwd DB 01H
__5DC78390_cstddef DB 01H
__33B42F3D_initializer_list DB 01H
__BB98980C_stdint@h DB 01H
__4552B840_cstdint DB 01H
__7FB6D5C7_type_traits DB 01H
__CF01DCB6_utility DB 01H
__12DC71E1___msvc_iter_core@hpp DB 01H
__D740E0F1_xutility DB 01H
__C6EC57B1_iterator DB 01H
__F7972D0B_share@h DB 01H
__3D410F40___msvc_system_error_abi@hpp DB 01H
__67C27134_cerrno DB 01H
__FA77ED4C_malloc@h DB 01H
__89766DA4_corecrt_terminate@h DB 01H
__27A4BD10_eh@h DB 01H
__E5C78335_vcruntime_exception@h DB 01H
__7C536CCC_exception DB 01H
__B9985323_float@h DB 01H
__89A7CE48_cfloat DB 01H
__98438E05_isa_availability@h DB 01H
__EF41832C_limits DB 01H
__0DB0C2E5_new DB 01H
__765FE01A_xatomic@h DB 01H
__A594BF75_xmemory DB 01H
__DFFCB714___msvc_sanitizer_annotate_container@hpp DB 01H
__D14739E9_xstring DB 01H
__F51D5691_stdexcept DB 01H
__ED2630B9_xcall_once@h DB 01H
__E6D9FA8D_xerrc@h DB 01H
__0A9237D2_time@h DB 01H
__BD655389_ctime DB 01H
__618403B0_xtimec@h DB 01H
__F68435D1_xthreads@h DB 01H
__8474DFEE_atomic DB 01H
__527B2299_system_error DB 01H
__0632977E_vcruntime_typeinfo@h DB 01H
__A79F13E8_typeinfo DB 01H
__53EF8FA2_memory DB 01H
__7FAAD8AD_xfacet DB 01H
__53FF2065___msvc_xlocinfo_types@hpp DB 01H
__1EC467ED_ctype@h DB 01H
__F528E268_cctype DB 01H
__791C33B7_locale@h DB 01H
__6BA085EC_clocale DB 01H
__B816F020_xlocinfo DB 01H
__0E794DD8_xlocale DB 01H
__81F38733_xiosbase DB 01H
__F7BDEE2D_streambuf DB 01H
__90FE2BCF_xlocnum DB 01H
__F57DF8F3_ios DB 01H
__1D69971C_ostream DB 01H
__7EB9A226_istream DB 01H
__B5399AEE_iostream DB 01H
__4F7E8057_1@cpp DB 01H
msvcjmc	ENDS
PUBLIC	?__empty_global_delete@@YAXPEAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPEAX_K@Z		; __empty_global_delete
PUBLIC	?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ; std::_Narrow_char_traits<char,int>::length
PUBLIC	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
PUBLIC	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ	; std::_Narrow_char_traits<char,int>::eof
PUBLIC	?isLeapYear@@YA_NH@Z				; isLeapYear
PUBLIC	?isValidDate@@YA_NHHH@Z				; isValidDate
PUBLIC	?dayOfYear@@YAHHHH@Z				; dayOfYear
PUBLIC	?daysUntilBirthday@@YAHHHH@Z			; daysUntilBirthday
PUBLIC	main
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_03EEFOAFAG@RUS@				; `string'
PUBLIC	??_C@_0CJ@KNEMKGII@?B?b?e?d?h?r?e?5?d?e?m?$PM?0?5?l?e?q?$PP?v?5?h?5?c?n?d?5?$CI?D?D?5?L@ ; `string'
PUBLIC	??_C@_0DE@MNOKNOLH@?M?e?j?n?p?p?e?j?r?m?$OA?$PP?5?d?$OA?r?$OA?4?5?O?n?f?$OA?k?s?i?q?r?$OA?0?5@ ; `string'
PUBLIC	??_C@_0L@DEDBEOEN@?b?h?q?n?j?n?q?m?$PL?i@	; `string'
PUBLIC	??_C@_0O@JNNOABFE@?m?e?5?b?h?q?n?j?n?q?m?$PL?i@	; `string'
PUBLIC	??_C@_04JKKHPADM@?C?n?d?5@			; `string'
PUBLIC	??_C@_0BO@CMHEMFCG@?O?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?5?d?m?$PP?5?b?5?c?n?d?s?3?5@ ; `string'
PUBLIC	??_C@_0CP@PACDEDDP@?B?b?e?d?h?r?e?5?d?e?m?$PM?5?h?5?l?e?q?$PP?v?5?q?b?n?e?c?n?5?p?n?f@ ; `string'
PUBLIC	??_C@_0EG@DKHDIGNO@?M?e?j?n?p?p?e?j?r?m?$OA?$PP?5?d?$OA?r?$OA?4?5?O?n?f?$OA?k?s?i?q?r?$OA?0?5@ ; `string'
PUBLIC	??_C@_0CC@DHIPJDDH@?D?m?e?i?5?d?n?5?a?k?h?f?$OA?i?x?e?c?n?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP@ ; `string'
EXTRN	strlen:PROC
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	__imp_setlocale:PROC
EXTRN	__imp_?good@ios_base@std@@QEBA_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QEBAHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QEBA_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QEAA_J_J@Z:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ:PROC
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z:PROC
EXTRN	__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ:PROC
EXTRN	__imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@AEAH@Z:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__CxxFrameHandler4:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__GSHandlerCheck_EH4:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	__security_cookie:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z DD imagerel $LN5
	DD	imagerel $LN5+95
	DD	imagerel $unwind$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isLeapYear@@YA_NH@Z DD imagerel $LN6
	DD	imagerel $LN6+130
	DD	imagerel $unwind$?isLeapYear@@YA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isValidDate@@YA_NHHH@Z DD imagerel $LN8
	DD	imagerel $LN8+303
	DD	imagerel $unwind$?isValidDate@@YA_NHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dayOfYear@@YAHHHH@Z DD imagerel $LN7
	DD	imagerel $LN7+279
	DD	imagerel $unwind$?dayOfYear@@YAHHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?daysUntilBirthday@@YAHHHH@Z DD imagerel $LN5
	DD	imagerel $LN5+109
	DD	imagerel $unwind$?daysUntilBirthday@@YAHHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main DD	imagerel $LN13
	DD	imagerel $LN13+717
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD imagerel $LN25
	DD	imagerel $LN25+991
	DD	imagerel $unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA+80
	DD	imagerel $unwind$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+115
	DD	imagerel $unwind$??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel $LN4
	DD	imagerel $LN4+148
	DD	imagerel $unwind$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+120
	DD	imagerel $unwind$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel $LN7
	DD	imagerel $LN7+261
	DD	imagerel $unwind$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA DD imagerel ?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA
	DD	imagerel ?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN6
	DD	imagerel $LN6+115
	DD	imagerel $unwind$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0CC@DHIPJDDH@?D?m?e?i?5?d?n?5?a?k?h?f?$OA?i?x?e?c?n?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP@
CONST	SEGMENT
??_C@_0CC@DHIPJDDH@?D?m?e?i?5?d?n?5?a?k?h?f?$OA?i?x?e?c?n?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP@ DB 0c4H
	DB	0edH, 0e5H, 0e9H, ' ', 0e4H, 0eeH, ' ', 0e1H, 0ebH, 0e8H, 0e6H
	DB	0e0H, 0e9H, 0f8H, 0e5H, 0e3H, 0eeH, ' ', 0e4H, 0edH, 0ffH, ' ', 0f0H
	DB	0eeH, 0e6H, 0e4H, 0e5H, 0edH, 0e8H, 0ffH, ': ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@DKHDIGNO@?M?e?j?n?p?p?e?j?r?m?$OA?$PP?5?d?$OA?r?$OA?4?5?O?n?f?$OA?k?s?i?q?r?$OA?0?5@
CONST	SEGMENT
??_C@_0EG@DKHDIGNO@?M?e?j?n?p?p?e?j?r?m?$OA?$PP?5?d?$OA?r?$OA?4?5?O?n?f?$OA?k?s?i?q?r?$OA?0?5@ DB 0cdH
	DB	0e5H, 0eaH, 0eeH, 0f0H, 0f0H, 0e5H, 0eaH, 0f2H, 0edH, 0e0H, 0ffH
	DB	' ', 0e4H, 0e0H, 0f2H, 0e0H, '. ', 0cfH, 0eeH, 0e6H, 0e0H, 0ebH
	DB	0f3H, 0e9H, 0f1H, 0f2H, 0e0H, ', ', 0e2H, 0e2H, 0e5H, 0e4H, 0e8H
	DB	0f2H, 0e5H, ' ', 0e4H, 0e5H, 0edH, 0fcH, ' ', 0e8H, ' ', 0ecH, 0e5H
	DB	0f1H, 0ffH, 0f6H, ' ', 0f0H, 0eeH, 0e6H, 0e4H, 0e5H, 0edH, 0e8H
	DB	0ffH, ' ', 0e7H, 0e0H, 0edH, 0eeH, 0e2H, 0eeH, ': ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@PACDEDDP@?B?b?e?d?h?r?e?5?d?e?m?$PM?5?h?5?l?e?q?$PP?v?5?q?b?n?e?c?n?5?p?n?f@
CONST	SEGMENT
??_C@_0CP@PACDEDDP@?B?b?e?d?h?r?e?5?d?e?m?$PM?5?h?5?l?e?q?$PP?v?5?q?b?n?e?c?n?5?p?n?f@ DB 0c2H
	DB	0e2H, 0e5H, 0e4H, 0e8H, 0f2H, 0e5H, ' ', 0e4H, 0e5H, 0edH, 0fcH
	DB	' ', 0e8H, ' ', 0ecH, 0e5H, 0f1H, 0ffH, 0f6H, ' ', 0f1H, 0e2H, 0eeH
	DB	0e5H, 0e3H, 0eeH, ' ', 0f0H, 0eeH, 0e6H, 0e4H, 0e5H, 0edH, 0e8H
	DB	0ffH, ' (', 0c4H, 0c4H, ' ', 0ccH, 0ccH, '): ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@CMHEMFCG@?O?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?5?d?m?$PP?5?b?5?c?n?d?s?3?5@
CONST	SEGMENT
??_C@_0BO@CMHEMFCG@?O?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?5?d?m?$PP?5?b?5?c?n?d?s?3?5@ DB 0cfH
	DB	0eeH, 0f0H, 0ffH, 0e4H, 0eaH, 0eeH, 0e2H, 0fbH, 0e9H, ' ', 0edH
	DB	0eeH, 0ecH, 0e5H, 0f0H, ' ', 0e4H, 0edH, 0ffH, ' ', 0e2H, ' ', 0e3H
	DB	0eeH, 0e4H, 0f3H, ': ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04JKKHPADM@?C?n?d?5@
CONST	SEGMENT
??_C@_04JKKHPADM@?C?n?d?5@ DB 0c3H, 0eeH, 0e4H, ' ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JNNOABFE@?m?e?5?b?h?q?n?j?n?q?m?$PL?i@
CONST	SEGMENT
??_C@_0O@JNNOABFE@?m?e?5?b?h?q?n?j?n?q?m?$PL?i@ DB 0edH, 0e5H, ' ', 0e2H, 0e8H
	DB	0f1H, 0eeH, 0eaH, 0eeH, 0f1H, 0edH, 0fbH, 0e9H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DEDBEOEN@?b?h?q?n?j?n?q?m?$PL?i@
CONST	SEGMENT
??_C@_0L@DEDBEOEN@?b?h?q?n?j?n?q?m?$PL?i@ DB 0e2H, 0e8H, 0f1H, 0eeH, 0eaH
	DB	0eeH, 0f1H, 0edH, 0fbH, 0e9H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@MNOKNOLH@?M?e?j?n?p?p?e?j?r?m?$OA?$PP?5?d?$OA?r?$OA?4?5?O?n?f?$OA?k?s?i?q?r?$OA?0?5@
CONST	SEGMENT
??_C@_0DE@MNOKNOLH@?M?e?j?n?p?p?e?j?r?m?$OA?$PP?5?d?$OA?r?$OA?4?5?O?n?f?$OA?k?s?i?q?r?$OA?0?5@ DB 0cdH
	DB	0e5H, 0eaH, 0eeH, 0f0H, 0f0H, 0e5H, 0eaH, 0f2H, 0edH, 0e0H, 0ffH
	DB	' ', 0e4H, 0e0H, 0f2H, 0e0H, '. ', 0cfH, 0eeH, 0e6H, 0e0H, 0ebH
	DB	0f3H, 0e9H, 0f1H, 0f2H, 0e0H, ', ', 0e2H, 0e2H, 0e5H, 0e4H, 0e8H
	DB	0f2H, 0e5H, ' ', 0e4H, 0e0H, 0f2H, 0f3H, ' ', 0e7H, 0e0H, 0edH
	DB	0eeH, 0e2H, 0eeH, '.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@KNEMKGII@?B?b?e?d?h?r?e?5?d?e?m?$PM?0?5?l?e?q?$PP?v?5?h?5?c?n?d?5?$CI?D?D?5?L@
CONST	SEGMENT
??_C@_0CJ@KNEMKGII@?B?b?e?d?h?r?e?5?d?e?m?$PM?0?5?l?e?q?$PP?v?5?h?5?c?n?d?5?$CI?D?D?5?L@ DB 0c2H
	DB	0e2H, 0e5H, 0e4H, 0e8H, 0f2H, 0e5H, ' ', 0e4H, 0e5H, 0edH, 0fcH
	DB	', ', 0ecH, 0e5H, 0f1H, 0ffH, 0f6H, ' ', 0e8H, ' ', 0e3H, 0eeH
	DB	0e4H, ' (', 0c4H, 0c4H, ' ', 0ccH, 0ccH, ' ', 0c3H, 0c3H, 0c3H
	DB	0c3H, '): ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_03EEFOAFAG@RUS@
CONST	SEGMENT
??_C@_03EEFOAFAG@RUS@ DB 'RUS', 00H			; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DB 06H
	DB	00H
	DB	00H
	DB	'p'
	DB	02H
	DB	0f1H, 02H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DB 028H
	DD	imagerel $stateUnwindMap$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
	DD	imagerel $ip2state$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 025051811H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 025051319H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03bH
	DW	03c6H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 0aH
	DB	00H
	DB	00H
	DB	'A', 04H
	DB	02H
	DB	'<'
	DB	04H
	DB	0e1H, 08H
	DB	02H
	DB	't'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 02H
	DB	01H
	DB	080H
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 02H
	DB	02H
	DB	02H
	DB	04H
	DD	imagerel $handlerMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 06H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DB	028H
	DB	030H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 038H
	DD	imagerel $stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	imagerel $tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	imagerel $ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD 025054219H
	DD	01132318H
	DD	0700c0045H
	DD	0500bH
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	0213H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcName$0 DB 05fH ; std::operator<<<std::char_traits<char> >
	DB	04fH
	DB	06bH
	DB	00H
	ORG $+12
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcVarDesc DD 088H ; std::operator<<<std::char_traits<char> >
	DD	010H
	DQ	FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcName$0
	ORG $+48
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcFrameData DD 01H ; std::operator<<<std::char_traits<char> >
	DD	00H
	DQ	FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02aH
	DW	02b4H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main DD	025053119H
	DD	010a230fH
	DD	070030043H
	DD	05002H
	DD	imagerel __GSHandlerCheck
	DD	0200H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
main$rtcName$0 DB 064H
	DB	061H
	DB	079H
	DB	00H
main$rtcName$1 DB 06dH
	DB	06fH
	DB	06eH
	DB	074H
	DB	068H
	DB	00H
	ORG $+2
main$rtcName$2 DB 079H
	DB	065H
	DB	061H
	DB	072H
	DB	00H
	ORG $+7
main$rtcName$3 DB 062H
	DB	069H
	DB	072H
	DB	074H
	DB	068H
	DB	064H
	DB	061H
	DB	079H
	DB	044H
	DB	061H
	DB	079H
	DB	00H
	ORG $+4
main$rtcName$4 DB 062H
	DB	069H
	DB	072H
	DB	074H
	DB	068H
	DB	064H
	DB	061H
	DB	079H
	DB	04dH
	DB	06fH
	DB	06eH
	DB	074H
	DB	068H
	DB	00H
	ORG $+10
main$rtcVarDesc DD 0e4H
	DD	04H
	DQ	FLAT:main$rtcName$4
	DD	0c4H
	DD	04H
	DQ	FLAT:main$rtcName$3
	DD	064H
	DD	04H
	DQ	FLAT:main$rtcName$2
	DD	044H
	DD	04H
	DQ	FLAT:main$rtcName$1
	DD	024H
	DD	04H
	DQ	FLAT:main$rtcName$0
	ORG $+240
main$rtcFrameData DD 05H
	DD	00H
	DQ	FLAT:main$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?daysUntilBirthday@@YAHHHH@Z DD 025051b01H
	DD	0116231bH
	DD	0700f001dH
	DD	0500eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dayOfYear@@YAHHHH@Z DD 025053301H
	DD	0116231bH
	DD	0700f002fH
	DD	0500eH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?dayOfYear@@YAHHHH@Z$rtcName$0 DB 064H			; dayOfYear
	DB	061H
	DB	079H
	DB	073H
	DB	049H
	DB	06eH
	DB	04dH
	DB	06fH
	DB	06eH
	DB	074H
	DB	068H
	DB	00H
	ORG $+4
?dayOfYear@@YAHHHH@Z$rtcVarDesc DD 028H			; dayOfYear
	DD	034H
	DQ	FLAT:?dayOfYear@@YAHHHH@Z$rtcName$0
	ORG $+48
?dayOfYear@@YAHHHH@Z$rtcFrameData DD 01H		; dayOfYear
	DD	00H
	DQ	FLAT:?dayOfYear@@YAHHHH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isValidDate@@YA_NHHH@Z DD 025053301H
	DD	0116231bH
	DD	0700f0027H
	DD	0500eH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?isValidDate@@YA_NHHH@Z$rtcName$0 DB 064H		; isValidDate
	DB	061H
	DB	079H
	DB	073H
	DB	049H
	DB	06eH
	DB	04dH
	DB	06fH
	DB	06eH
	DB	074H
	DB	068H
	DB	00H
	ORG $+4
?isValidDate@@YA_NHHH@Z$rtcVarDesc DD 028H		; isValidDate
	DD	034H
	DQ	FLAT:?isValidDate@@YA_NHHH@Z$rtcName$0
	ORG $+48
?isValidDate@@YA_NHHH@Z$rtcFrameData DD 01H		; isValidDate
	DD	00H
	DQ	FLAT:?isValidDate@@YA_NHHH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isLeapYear@@YA_NH@Z DD 025051201H
	DD	010d2312H
	DD	07006001fH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ DD 025050f01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX_K@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	c2 00 00	 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT

; 129  :         explicit __CLR_OR_THIS_CALL operator bool() const {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__1D69971C_ostream
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 130  :             return _Ok;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]

; 131  :         }

  0002a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00031	5f		 pop	 rdi
  00032	5d		 pop	 rbp
  00033	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Zero_uncaught_exceptions$ = 4
tv72 = 212
this$ = 256
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT

; 114  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__1D69971C_ostream
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 115  : #if !_HAS_EXCEPTIONS
; 116  :             const bool _Zero_uncaught_exceptions = true;
; 117  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 118  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  0001f	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  00024	0f b6 c0	 movzx	 eax, al
  00027	85 c0		 test	 eax, eax
  00029	75 09		 jne	 SHORT $LN4@sentry
  0002b	c6 85 d4 00 00
	00 01		 mov	 BYTE PTR tv72[rbp], 1
  00032	eb 07		 jmp	 SHORT $LN5@sentry
$LN4@sentry:
  00034	c6 85 d4 00 00
	00 00		 mov	 BYTE PTR tv72[rbp], 0
$LN5@sentry:
  0003b	0f b6 85 d4 00
	00 00		 movzx	 eax, BYTE PTR tv72[rbp]
  00042	88 45 04	 mov	 BYTE PTR _Zero_uncaught_exceptions$[rbp], al

; 119  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 120  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 121  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 122  : 
; 123  :             if (_Zero_uncaught_exceptions) {

  00045	0f b6 45 04	 movzx	 eax, BYTE PTR _Zero_uncaught_exceptions$[rbp]
  00049	85 c0		 test	 eax, eax
  0004b	74 10		 je	 SHORT $LN2@sentry

; 124  :                 this->_Myostr._Osfx();

  0004d	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00054	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00057	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ
$LN2@sentry:

; 125  :             }
; 126  :         }

  0005d	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00064	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00069	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00070	5f		 pop	 rdi
  00071	5d		 pop	 rbp
  00072	c3		 ret	 0
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
_TEXT	SEGMENT
_Tied$ = 8
this$ = 256
_Ostr$ = 264
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT

; 97   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__1D69971C_ostream
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Ostr$[rbp]
  0002b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00032	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  00037	90		 npad	 1

; 98   :             if (!_Ostr.good()) {

  00038	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0003f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00042	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00046	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0004d	48 03 c8	 add	 rcx, rax
  00050	48 8b c1	 mov	 rax, rcx
  00053	48 8b c8	 mov	 rcx, rax
  00056	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?good@ios_base@std@@QEBA_NXZ
  0005c	0f b6 c0	 movzx	 eax, al
  0005f	85 c0		 test	 eax, eax
  00061	75 10		 jne	 SHORT $LN2@sentry

; 99   :                 _Ok = false;

  00063	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006a	c6 40 08 00	 mov	 BYTE PTR [rax+8], 0

; 100  :                 return;

  0006e	e9 81 00 00 00	 jmp	 $LN1@sentry
$LN2@sentry:

; 101  :             }
; 102  : 
; 103  :             const auto _Tied = _Ostr.tie();

  00073	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0007a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007d	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00081	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00088	48 03 c8	 add	 rcx, rax
  0008b	48 8b c1	 mov	 rax, rcx
  0008e	48 8b c8	 mov	 rcx, rax
  00091	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  00097	48 89 45 08	 mov	 QWORD PTR _Tied$[rbp], rax

; 104  :             if (!_Tied || _Tied == &_Ostr) {

  0009b	48 83 7d 08 00	 cmp	 QWORD PTR _Tied$[rbp], 0
  000a0	74 0d		 je	 SHORT $LN4@sentry
  000a2	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  000a9	48 39 45 08	 cmp	 QWORD PTR _Tied$[rbp], rax
  000ad	75 0d		 jne	 SHORT $LN3@sentry
$LN4@sentry:

; 105  :                 _Ok = true;

  000af	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b6	c6 40 08 01	 mov	 BYTE PTR [rax+8], 1

; 106  :                 return;

  000ba	eb 38		 jmp	 SHORT $LN1@sentry
$LN3@sentry:

; 107  :             }
; 108  : 
; 109  :             _Tied->flush();

  000bc	48 8b 4d 08	 mov	 rcx, QWORD PTR _Tied$[rbp]
  000c0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ

; 110  :             _Ok = _Ostr.good(); // store test only after flushing tie

  000c6	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  000cd	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000d0	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000d4	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  000db	48 03 c8	 add	 rcx, rax
  000de	48 8b c1	 mov	 rax, rcx
  000e1	48 8b c8	 mov	 rcx, rax
  000e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?good@ios_base@std@@QEBA_NXZ
  000ea	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	88 41 08	 mov	 BYTE PTR [rcx+8], al
$LN1@sentry:

; 111  :         }

  000f4	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000fb	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00102	5f		 pop	 rdi
  00103	5d		 pop	 rbp
  00104	c3		 ret	 0
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_Tied$ = 8
this$ = 256
_Ostr$ = 264
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Rdbuf$ = 8
tv72 = 216
this$ = 256
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT

; 83   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__1D69971C_ostream
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 84   :             const auto _Rdbuf = _Myostr.rdbuf();

  0001f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00029	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv72[rbp], rax
  00030	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv72[rbp]
  00037	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0003a	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0003e	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv72[rbp]
  00045	48 03 c8	 add	 rcx, rax
  00048	48 8b c1	 mov	 rax, rcx
  0004b	48 8b c8	 mov	 rcx, rax
  0004e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00054	48 89 45 08	 mov	 QWORD PTR _Rdbuf$[rbp], rax

; 85   :             if (_Rdbuf) {

  00058	48 83 7d 08 00	 cmp	 QWORD PTR _Rdbuf$[rbp], 0
  0005d	74 0f		 je	 SHORT $LN2@Sentry_bas

; 86   :                 _Rdbuf->_Unlock();

  0005f	48 8b 45 08	 mov	 rax, QWORD PTR _Rdbuf$[rbp]
  00063	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00066	48 8b 4d 08	 mov	 rcx, QWORD PTR _Rdbuf$[rbp]
  0006a	ff 50 10	 call	 QWORD PTR [rax+16]
  0006d	90		 npad	 1
$LN2@Sentry_bas:

; 87   :             }
; 88   :         }

  0006e	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00075	5f		 pop	 rdi
  00076	5d		 pop	 rbp
  00077	c3		 ret	 0
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
_TEXT	SEGMENT
_Rdbuf$ = 8
tv73 = 216
this$ = 256
_Ostr$ = 264
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT

; 76   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__1D69971C_ostream
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00032	48 89 08	 mov	 QWORD PTR [rax], rcx

; 77   :             const auto _Rdbuf = _Myostr.rdbuf();

  00035	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0003f	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv73[rbp], rax
  00046	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv73[rbp]
  0004d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00050	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00054	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv73[rbp]
  0005b	48 03 c8	 add	 rcx, rax
  0005e	48 8b c1	 mov	 rax, rcx
  00061	48 8b c8	 mov	 rcx, rax
  00064	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0006a	48 89 45 08	 mov	 QWORD PTR _Rdbuf$[rbp], rax

; 78   :             if (_Rdbuf) {

  0006e	48 83 7d 08 00	 cmp	 QWORD PTR _Rdbuf$[rbp], 0
  00073	74 0e		 je	 SHORT $LN2@Sentry_bas

; 79   :                 _Rdbuf->_Lock();

  00075	48 8b 45 08	 mov	 rax, QWORD PTR _Rdbuf$[rbp]
  00079	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007c	48 8b 4d 08	 mov	 rcx, QWORD PTR _Rdbuf$[rbp]
  00080	ff 50 08	 call	 QWORD PTR [rax+8]
$LN2@Sentry_bas:

; 80   :             }
; 81   :         }

  00083	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008a	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00091	5f		 pop	 rdi
  00092	5d		 pop	 rbp
  00093	c3		 ret	 0
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z
_TEXT	SEGMENT
_Ostr$ = 224
??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT

; 1011 :     basic_ostream<_Elem, _Traits>& _Ostr) { // insert newline and flush stream

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__1D69971C_ostream
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1012 :     _Ostr.put(_Ostr.widen('\n'));

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00026	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00029	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0002d	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00034	48 03 c8	 add	 rcx, rax
  00037	48 8b c1	 mov	 rax, rcx
  0003a	b2 0a		 mov	 dl, 10
  0003c	48 8b c8	 mov	 rcx, rax
  0003f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z
  00045	0f b6 d0	 movzx	 edx, al
  00048	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0004f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z

; 1013 :     _Ostr.flush();

  00055	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ

; 1014 :     return _Ostr;

  00062	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]

; 1015 : }

  00069	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00070	5f		 pop	 rdi
  00071	5d		 pop	 rbp
  00072	c3		 ret	 0
??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
_TEXT	SEGMENT
_State$ = 4
_Count$ = 40
_Pad$ = 72
_Ok$ = 104
$T4 = 340
$T5 = 372
$T6 = 404
$T7 = 436
$T8 = 472
tv285 = 484
tv283 = 484
tv296 = 488
tv295 = 488
tv139 = 488
tv137 = 488
__$ArrayPad$ = 496
_Ostr$ = 544
_Val$ = 552
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 767  : basic_ostream<char, _Traits>& operator<<(basic_ostream<char, _Traits>& _Ostr, const char* _Val) {

$LN25:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 28 02
	00 00		 sub	 rsp, 552		; 00000228H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  0001d	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	48 8b 8c 24 48
	02 00 00	 mov	 rcx, QWORD PTR [rsp+584]
  00031	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00038	48 33 c5	 xor	 rax, rbp
  0003b	48 89 85 f0 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00042	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__1D69971C_ostream
  00049	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 768  :     // insert NTBS into char stream
; 769  :     using _Elem = char;
; 770  :     using _Myos = basic_ostream<_Elem, _Traits>;
; 771  : 
; 772  :     ios_base::iostate _State = ios_base::goodbit;

  0004e	c7 45 04 00 00
	00 00		 mov	 DWORD PTR _State$[rbp], 0

; 773  :     streamsize _Count        = static_cast<streamsize>(_Traits::length(_Val));

  00055	48 8b 8d 28 02
	00 00		 mov	 rcx, QWORD PTR _Val$[rbp]
  0005c	e8 00 00 00 00	 call	 ?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ; std::_Narrow_char_traits<char,int>::length
  00061	48 89 45 28	 mov	 QWORD PTR _Count$[rbp], rax

; 774  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  00065	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0006c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0006f	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00073	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0007a	48 03 c8	 add	 rcx, rax
  0007d	48 8b c1	 mov	 rax, rcx
  00080	48 8b c8	 mov	 rcx, rax
  00083	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  00089	48 85 c0	 test	 rax, rax
  0008c	7e 5b		 jle	 SHORT $LN17@operator
  0008e	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00095	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00098	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0009c	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  000a3	48 03 c8	 add	 rcx, rax
  000a6	48 8b c1	 mov	 rax, rcx
  000a9	48 8b c8	 mov	 rcx, rax
  000ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  000b2	48 3b 45 28	 cmp	 rax, QWORD PTR _Count$[rbp]
  000b6	7e 31		 jle	 SHORT $LN17@operator
  000b8	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  000bf	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c2	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000c6	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  000cd	48 03 c8	 add	 rcx, rax
  000d0	48 8b c1	 mov	 rax, rcx
  000d3	48 8b c8	 mov	 rcx, rax
  000d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  000dc	48 2b 45 28	 sub	 rax, QWORD PTR _Count$[rbp]
  000e0	48 89 85 e8 01
	00 00		 mov	 QWORD PTR tv137[rbp], rax
  000e7	eb 0b		 jmp	 SHORT $LN18@operator
$LN17@operator:
  000e9	48 c7 85 e8 01
	00 00 00 00 00
	00		 mov	 QWORD PTR tv137[rbp], 0
$LN18@operator:
  000f4	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR tv137[rbp]
  000fb	48 89 45 48	 mov	 QWORD PTR _Pad$[rbp], rax

; 775  :     const typename _Myos::sentry _Ok(_Ostr);

  000ff	48 8b 95 20 02
	00 00		 mov	 rdx, QWORD PTR _Ostr$[rbp]
  00106	48 8d 4d 68	 lea	 rcx, QWORD PTR _Ok$[rbp]
  0010a	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  0010f	90		 npad	 1

; 776  : 
; 777  :     if (!_Ok) {

  00110	48 8d 4d 68	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00114	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  00119	0f b6 c0	 movzx	 eax, al
  0011c	85 c0		 test	 eax, eax
  0011e	75 0e		 jne	 SHORT $LN8@operator

; 778  :         _State |= ios_base::badbit;

  00120	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  00123	83 c8 04	 or	 eax, 4
  00126	89 45 04	 mov	 DWORD PTR _State$[rbp], eax

; 779  :     } else { // state okay, insert

  00129	e9 3a 02 00 00	 jmp	 $LN9@operator
$LN8@operator:

; 780  :         _TRY_IO_BEGIN
; 781  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  0012e	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00135	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00138	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0013c	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00143	48 03 c8	 add	 rcx, rax
  00146	48 8b c1	 mov	 rax, rcx
  00149	48 8b c8	 mov	 rcx, rax
  0014c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flags@ios_base@std@@QEBAHXZ
  00152	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00157	83 f8 40	 cmp	 eax, 64			; 00000040H
  0015a	0f 84 bd 00 00
	00		 je	 $LN11@operator

; 782  :             for (; 0 < _Pad; --_Pad) { // pad on left

  00160	eb 0b		 jmp	 SHORT $LN4@operator
$LN2@operator:
  00162	48 8b 45 48	 mov	 rax, QWORD PTR _Pad$[rbp]
  00166	48 ff c8	 dec	 rax
  00169	48 89 45 48	 mov	 QWORD PTR _Pad$[rbp], rax
$LN4@operator:
  0016d	48 83 7d 48 00	 cmp	 QWORD PTR _Pad$[rbp], 0
  00172	0f 8e a5 00 00
	00		 jle	 $LN11@operator

; 783  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00178	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0017f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00182	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00186	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0018d	48 03 c8	 add	 rcx, rax
  00190	48 8b c1	 mov	 rax, rcx
  00193	48 8b c8	 mov	 rcx, rax
  00196	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
  0019c	88 85 e4 01 00
	00		 mov	 BYTE PTR tv285[rbp], al
  001a2	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  001a9	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  001ac	48 63 49 04	 movsxd	 rcx, DWORD PTR [rcx+4]
  001b0	48 8b 95 20 02
	00 00		 mov	 rdx, QWORD PTR _Ostr$[rbp]
  001b7	48 03 d1	 add	 rdx, rcx
  001ba	48 8b ca	 mov	 rcx, rdx
  001bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001c3	0f b6 8d e4 01
	00 00		 movzx	 ecx, BYTE PTR tv285[rbp]
  001ca	0f b6 d1	 movzx	 edx, cl
  001cd	48 8b c8	 mov	 rcx, rax
  001d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  001d6	89 85 e8 01 00
	00		 mov	 DWORD PTR tv139[rbp], eax
  001dc	8b 85 e8 01 00
	00		 mov	 eax, DWORD PTR tv139[rbp]
  001e2	89 85 54 01 00
	00		 mov	 DWORD PTR $T4[rbp], eax
  001e8	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  001ed	89 85 74 01 00
	00		 mov	 DWORD PTR $T5[rbp], eax
  001f3	48 8d 95 54 01
	00 00		 lea	 rdx, QWORD PTR $T4[rbp]
  001fa	48 8d 8d 74 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  00201	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00206	0f b6 c0	 movzx	 eax, al
  00209	85 c0		 test	 eax, eax
  0020b	74 0b		 je	 SHORT $LN12@operator

; 784  :                     _State |= ios_base::badbit; // insertion failed, quit

  0020d	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  00210	83 c8 04	 or	 eax, 4
  00213	89 45 04	 mov	 DWORD PTR _State$[rbp], eax

; 785  :                     break;

  00216	eb 05		 jmp	 SHORT $LN11@operator
$LN12@operator:

; 786  :                 }
; 787  :             }

  00218	e9 45 ff ff ff	 jmp	 $LN2@operator
$LN11@operator:

; 788  :         }
; 789  : 
; 790  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  0021d	83 7d 04 00	 cmp	 DWORD PTR _State$[rbp], 0
  00221	75 55		 jne	 SHORT $LN13@operator
  00223	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0022a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0022d	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00231	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00238	48 03 c8	 add	 rcx, rax
  0023b	48 8b c1	 mov	 rax, rcx
  0023e	48 8b c8	 mov	 rcx, rax
  00241	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00247	4c 8b 45 28	 mov	 r8, QWORD PTR _Count$[rbp]
  0024b	48 8b 95 28 02
	00 00		 mov	 rdx, QWORD PTR _Val$[rbp]
  00252	48 8b c8	 mov	 rcx, rax
  00255	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z
  0025b	48 89 85 e8 01
	00 00		 mov	 QWORD PTR tv295[rbp], rax
  00262	48 8b 45 28	 mov	 rax, QWORD PTR _Count$[rbp]
  00266	48 39 85 e8 01
	00 00		 cmp	 QWORD PTR tv295[rbp], rax
  0026d	74 09		 je	 SHORT $LN13@operator

; 791  :             _State |= ios_base::badbit;

  0026f	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  00272	83 c8 04	 or	 eax, 4
  00275	89 45 04	 mov	 DWORD PTR _State$[rbp], eax
$LN13@operator:

; 792  :         }
; 793  : 
; 794  :         if (_State == ios_base::goodbit) {

  00278	83 7d 04 00	 cmp	 DWORD PTR _State$[rbp], 0
  0027c	0f 85 bd 00 00
	00		 jne	 $LN14@operator

; 795  :             for (; 0 < _Pad; --_Pad) { // pad on right

  00282	eb 0b		 jmp	 SHORT $LN7@operator
$LN5@operator:
  00284	48 8b 45 48	 mov	 rax, QWORD PTR _Pad$[rbp]
  00288	48 ff c8	 dec	 rax
  0028b	48 89 45 48	 mov	 QWORD PTR _Pad$[rbp], rax
$LN7@operator:
  0028f	48 83 7d 48 00	 cmp	 QWORD PTR _Pad$[rbp], 0
  00294	0f 8e a5 00 00
	00		 jle	 $LN14@operator

; 796  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0029a	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  002a1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002a4	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  002a8	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  002af	48 03 c8	 add	 rcx, rax
  002b2	48 8b c1	 mov	 rax, rcx
  002b5	48 8b c8	 mov	 rcx, rax
  002b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
  002be	88 85 e4 01 00
	00		 mov	 BYTE PTR tv283[rbp], al
  002c4	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  002cb	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  002ce	48 63 49 04	 movsxd	 rcx, DWORD PTR [rcx+4]
  002d2	48 8b 95 20 02
	00 00		 mov	 rdx, QWORD PTR _Ostr$[rbp]
  002d9	48 03 d1	 add	 rdx, rcx
  002dc	48 8b ca	 mov	 rcx, rdx
  002df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  002e5	0f b6 8d e4 01
	00 00		 movzx	 ecx, BYTE PTR tv283[rbp]
  002ec	0f b6 d1	 movzx	 edx, cl
  002ef	48 8b c8	 mov	 rcx, rax
  002f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  002f8	89 85 e8 01 00
	00		 mov	 DWORD PTR tv296[rbp], eax
  002fe	8b 85 e8 01 00
	00		 mov	 eax, DWORD PTR tv296[rbp]
  00304	89 85 94 01 00
	00		 mov	 DWORD PTR $T6[rbp], eax
  0030a	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0030f	89 85 b4 01 00
	00		 mov	 DWORD PTR $T7[rbp], eax
  00315	48 8d 95 94 01
	00 00		 lea	 rdx, QWORD PTR $T6[rbp]
  0031c	48 8d 8d b4 01
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  00323	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00328	0f b6 c0	 movzx	 eax, al
  0032b	85 c0		 test	 eax, eax
  0032d	74 0b		 je	 SHORT $LN15@operator

; 797  :                     _State |= ios_base::badbit; // insertion failed, quit

  0032f	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  00332	83 c8 04	 or	 eax, 4
  00335	89 45 04	 mov	 DWORD PTR _State$[rbp], eax

; 798  :                     break;

  00338	eb 05		 jmp	 SHORT $LN14@operator
$LN15@operator:

; 799  :                 }
; 800  :             }

  0033a	e9 45 ff ff ff	 jmp	 $LN5@operator
$LN14@operator:

; 801  :         }
; 802  : 
; 803  :         _Ostr.width(0);

  0033f	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00346	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00349	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0034d	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00354	48 03 c8	 add	 rcx, rax
  00357	48 8b c1	 mov	 rax, rcx
  0035a	33 d2		 xor	 edx, edx
  0035c	48 8b c8	 mov	 rcx, rax
  0035f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEAA_J_J@Z
  00365	90		 npad	 1
  00366	eb 00		 jmp	 SHORT $LN9@operator
$LN23@operator:
$LN9@operator:

; 804  :         _CATCH_IO_(ios_base, _Ostr)
; 805  :     }
; 806  : 
; 807  :     _Ostr.setstate(_State);

  00368	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0036f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00372	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00376	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0037d	48 03 c8	 add	 rcx, rax
  00380	48 8b c1	 mov	 rax, rcx
  00383	45 33 c0	 xor	 r8d, r8d
  00386	8b 55 04	 mov	 edx, DWORD PTR _State$[rbp]
  00389	48 8b c8	 mov	 rcx, rax
  0038c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z

; 808  :     return _Ostr;

  00392	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00399	48 89 85 d8 01
	00 00		 mov	 QWORD PTR $T8[rbp], rax
  003a0	48 8d 4d 68	 lea	 rcx, QWORD PTR _Ok$[rbp]
  003a4	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  003a9	48 8b 85 d8 01
	00 00		 mov	 rax, QWORD PTR $T8[rbp]

; 809  : }

  003b0	48 8b f8	 mov	 rdi, rax
  003b3	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  003b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcFrameData
  003be	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  003c3	48 8b c7	 mov	 rax, rdi
  003c6	48 8b 8d f0 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  003cd	48 33 cd	 xor	 rcx, rbp
  003d0	e8 00 00 00 00	 call	 __security_check_cookie
  003d5	48 8d a5 08 02
	00 00		 lea	 rsp, QWORD PTR [rbp+520]
  003dc	5f		 pop	 rdi
  003dd	5d		 pop	 rbp
  003de	c3		 ret	 0
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ENDP ; std::operator<<<std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Count$ = 40
_Pad$ = 72
_Ok$ = 104
$T4 = 340
$T5 = 372
$T6 = 404
$T7 = 436
$T8 = 472
tv285 = 484
tv283 = 484
tv296 = 488
tv295 = 488
tv139 = 488
tv137 = 488
__$ArrayPad$ = 496
_Ostr$ = 544
_Val$ = 552
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 68	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00018	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Count$ = 40
_Pad$ = 72
_Ok$ = 104
$T4 = 340
$T5 = 372
$T6 = 404
$T7 = 436
$T8 = 472
tv285 = 484
tv283 = 484
tv296 = 488
tv295 = 488
tv139 = 488
tv137 = 488
__$ArrayPad$ = 496
_Ostr$ = 544
_Val$ = 552
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1

; 804  :         _CATCH_IO_(ios_base, _Ostr)

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
__catch$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$0:
  00014	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0001b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00022	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00029	48 03 c8	 add	 rcx, rax
  0002c	48 8b c1	 mov	 rax, rcx
  0002f	41 b0 01	 mov	 r8b, 1
  00032	ba 04 00 00 00	 mov	 edx, 4
  00037	48 8b c8	 mov	 rcx, rax
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  00040	90		 npad	 1
  00041	48 8d 05 00 00
	00 00		 lea	 rax, $LN23@catch$1
  00048	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
  0004f	cc		 int	 3
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\KPO\project1\1\1.cpp
;	COMDAT main
_TEXT	SEGMENT
day$ = 4
month$ = 36
year$ = 68
leapYear$ = 100
dayCount$ = 132
birthdayDay$ = 164
birthdayMonth$ = 196
daysInYear$ = 228
daysUntilNextBirthday$ = 260
tv172 = 468
tv134 = 472
__$ArrayPad$ = 480
main	PROC						; COMDAT

; 47   : int main() {

$LN13:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 18 02
	00 00		 sub	 rsp, 536		; 00000218H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00014	b9 4e 00 00 00	 mov	 ecx, 78			; 0000004eH
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00027	48 33 c5	 xor	 rax, rbp
  0002a	48 89 85 e0 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00031	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__4F7E8057_1@cpp
  00038	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 48   :     setlocale(LC_ALL, "RUS");

  0003d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03EEFOAFAG@RUS@
  00044	33 c9		 xor	 ecx, ecx
  00046	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_setlocale
$LN4@main:

; 49   :     int day, month, year;
; 50   : 
; 51   :     do {
; 52   :         cout << "Введите день, месяц и год (ДД ММ ГГГГ): ";

  0004c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@KNEMKGII@?B?b?e?d?h?r?e?5?d?e?m?$PM?0?5?l?e?q?$PP?v?5?h?5?c?n?d?5?$CI?D?D?5?L@
  00053	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0005a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 53   :         cin >> day >> month >> year;

  0005f	48 8d 55 04	 lea	 rdx, QWORD PTR day$[rbp]
  00063	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  0006a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@AEAH@Z
  00070	48 8d 55 24	 lea	 rdx, QWORD PTR month$[rbp]
  00074	48 8b c8	 mov	 rcx, rax
  00077	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@AEAH@Z
  0007d	48 8d 55 44	 lea	 rdx, QWORD PTR year$[rbp]
  00081	48 8b c8	 mov	 rcx, rax
  00084	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@AEAH@Z

; 54   : 
; 55   :         if (!isValidDate(day, month, year)) {

  0008a	44 8b 45 44	 mov	 r8d, DWORD PTR year$[rbp]
  0008e	8b 55 24	 mov	 edx, DWORD PTR month$[rbp]
  00091	8b 4d 04	 mov	 ecx, DWORD PTR day$[rbp]
  00094	e8 00 00 00 00	 call	 ?isValidDate@@YA_NHHH@Z	; isValidDate
  00099	0f b6 c0	 movzx	 eax, al
  0009c	85 c0		 test	 eax, eax
  0009e	75 23		 jne	 SHORT $LN7@main

; 56   :             cout << "Некорректная дата. Пожалуйста, введите дату заново." << endl;

  000a0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DE@MNOKNOLH@?M?e?j?n?p?p?e?j?r?m?$OA?$PP?5?d?$OA?r?$OA?4?5?O?n?f?$OA?k?s?i?q?r?$OA?0?5@
  000a7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  000ae	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  000b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  000ba	48 8b c8	 mov	 rcx, rax
  000bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
$LN7@main:

; 57   :         }
; 58   : 
; 59   :     } while (!isValidDate(day, month, year));

  000c3	44 8b 45 44	 mov	 r8d, DWORD PTR year$[rbp]
  000c7	8b 55 24	 mov	 edx, DWORD PTR month$[rbp]
  000ca	8b 4d 04	 mov	 ecx, DWORD PTR day$[rbp]
  000cd	e8 00 00 00 00	 call	 ?isValidDate@@YA_NHHH@Z	; isValidDate
  000d2	0f b6 c0	 movzx	 eax, al
  000d5	85 c0		 test	 eax, eax
  000d7	0f 84 6f ff ff
	ff		 je	 $LN4@main

; 60   : 
; 61   :     bool leapYear = isLeapYear(year);

  000dd	8b 4d 44	 mov	 ecx, DWORD PTR year$[rbp]
  000e0	e8 00 00 00 00	 call	 ?isLeapYear@@YA_NH@Z	; isLeapYear
  000e5	88 45 64	 mov	 BYTE PTR leapYear$[rbp], al

; 62   :     int dayCount = dayOfYear(day, month, year);

  000e8	44 8b 45 44	 mov	 r8d, DWORD PTR year$[rbp]
  000ec	8b 55 24	 mov	 edx, DWORD PTR month$[rbp]
  000ef	8b 4d 04	 mov	 ecx, DWORD PTR day$[rbp]
  000f2	e8 00 00 00 00	 call	 ?dayOfYear@@YAHHHH@Z	; dayOfYear
  000f7	89 85 84 00 00
	00		 mov	 DWORD PTR dayCount$[rbp], eax

; 63   : 
; 64   :     cout << "Год " << (leapYear ? "високосный" : "не високосный") << endl;

  000fd	0f b6 45 64	 movzx	 eax, BYTE PTR leapYear$[rbp]
  00101	85 c0		 test	 eax, eax
  00103	74 10		 je	 SHORT $LN9@main
  00105	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0L@DEDBEOEN@?b?h?q?n?j?n?q?m?$PL?i@
  0010c	48 89 85 d8 01
	00 00		 mov	 QWORD PTR tv134[rbp], rax
  00113	eb 0e		 jmp	 SHORT $LN10@main
$LN9@main:
  00115	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0O@JNNOABFE@?m?e?5?b?h?q?n?j?n?q?m?$PL?i@
  0011c	48 89 85 d8 01
	00 00		 mov	 QWORD PTR tv134[rbp], rax
$LN10@main:
  00123	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04JKKHPADM@?C?n?d?5@
  0012a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00131	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00136	48 8b 95 d8 01
	00 00		 mov	 rdx, QWORD PTR tv134[rbp]
  0013d	48 8b c8	 mov	 rcx, rax
  00140	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00145	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  0014c	48 8b c8	 mov	 rcx, rax
  0014f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 65   :     cout << "Порядковый номер дня в году: " << dayCount << endl;

  00155	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@CMHEMFCG@?O?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?5?d?m?$PP?5?b?5?c?n?d?s?3?5@
  0015c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00163	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00168	8b 95 84 00 00
	00		 mov	 edx, DWORD PTR dayCount$[rbp]
  0016e	48 8b c8	 mov	 rcx, rax
  00171	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
  00177	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  0017e	48 8b c8	 mov	 rcx, rax
  00181	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 66   : 
; 67   :     int birthdayDay, birthdayMonth;
; 68   : 
; 69   :     cout << "Введите день и месяц своего рождения (ДД ММ): ";

  00187	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@PACDEDDP@?B?b?e?d?h?r?e?5?d?e?m?$PM?5?h?5?l?e?q?$PP?v?5?q?b?n?e?c?n?5?p?n?f@
  0018e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00195	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 70   :     cin >> birthdayDay >> birthdayMonth;

  0019a	48 8d 95 a4 00
	00 00		 lea	 rdx, QWORD PTR birthdayDay$[rbp]
  001a1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  001a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@AEAH@Z
  001ae	48 8d 95 c4 00
	00 00		 lea	 rdx, QWORD PTR birthdayMonth$[rbp]
  001b5	48 8b c8	 mov	 rcx, rax
  001b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@AEAH@Z
$LN5@main:

; 71   : 
; 72   :     while (!isValidDate(birthdayDay, birthdayMonth, year)) {

  001be	44 8b 45 44	 mov	 r8d, DWORD PTR year$[rbp]
  001c2	8b 95 c4 00 00
	00		 mov	 edx, DWORD PTR birthdayMonth$[rbp]
  001c8	8b 8d a4 00 00
	00		 mov	 ecx, DWORD PTR birthdayDay$[rbp]
  001ce	e8 00 00 00 00	 call	 ?isValidDate@@YA_NHHH@Z	; isValidDate
  001d3	0f b6 c0	 movzx	 eax, al
  001d6	85 c0		 test	 eax, eax
  001d8	75 39		 jne	 SHORT $LN6@main

; 73   :         cout << "Некорректная дата. Пожалуйста, введите день и месяц рождения заново: ";

  001da	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EG@DKHDIGNO@?M?e?j?n?p?p?e?j?r?m?$OA?$PP?5?d?$OA?r?$OA?4?5?O?n?f?$OA?k?s?i?q?r?$OA?0?5@
  001e1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  001e8	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 74   :         cin >> birthdayDay >> birthdayMonth;

  001ed	48 8d 95 a4 00
	00 00		 lea	 rdx, QWORD PTR birthdayDay$[rbp]
  001f4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  001fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@AEAH@Z
  00201	48 8d 95 c4 00
	00 00		 lea	 rdx, QWORD PTR birthdayMonth$[rbp]
  00208	48 8b c8	 mov	 rcx, rax
  0020b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@AEAH@Z

; 75   :     }

  00211	eb ab		 jmp	 SHORT $LN5@main
$LN6@main:

; 76   : 
; 77   :     int daysInYear = leapYear ? 366 : 365;

  00213	0f b6 45 64	 movzx	 eax, BYTE PTR leapYear$[rbp]
  00217	85 c0		 test	 eax, eax
  00219	74 0c		 je	 SHORT $LN11@main
  0021b	c7 85 d4 01 00
	00 6e 01 00 00	 mov	 DWORD PTR tv172[rbp], 366 ; 0000016eH
  00225	eb 0a		 jmp	 SHORT $LN12@main
$LN11@main:
  00227	c7 85 d4 01 00
	00 6d 01 00 00	 mov	 DWORD PTR tv172[rbp], 365 ; 0000016dH
$LN12@main:
  00231	8b 85 d4 01 00
	00		 mov	 eax, DWORD PTR tv172[rbp]
  00237	89 85 e4 00 00
	00		 mov	 DWORD PTR daysInYear$[rbp], eax

; 78   : 
; 79   :     int daysUntilNextBirthday = daysUntilBirthday(dayCount, dayOfYear(birthdayDay, birthdayMonth, year), daysInYear);

  0023d	44 8b 45 44	 mov	 r8d, DWORD PTR year$[rbp]
  00241	8b 95 c4 00 00
	00		 mov	 edx, DWORD PTR birthdayMonth$[rbp]
  00247	8b 8d a4 00 00
	00		 mov	 ecx, DWORD PTR birthdayDay$[rbp]
  0024d	e8 00 00 00 00	 call	 ?dayOfYear@@YAHHHH@Z	; dayOfYear
  00252	44 8b 85 e4 00
	00 00		 mov	 r8d, DWORD PTR daysInYear$[rbp]
  00259	8b d0		 mov	 edx, eax
  0025b	8b 8d 84 00 00
	00		 mov	 ecx, DWORD PTR dayCount$[rbp]
  00261	e8 00 00 00 00	 call	 ?daysUntilBirthday@@YAHHHH@Z ; daysUntilBirthday
  00266	89 85 04 01 00
	00		 mov	 DWORD PTR daysUntilNextBirthday$[rbp], eax

; 80   :     cout << "Дней до ближайшего дня рождения: " << daysUntilNextBirthday << endl;

  0026c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@DHIPJDDH@?D?m?e?i?5?d?n?5?a?k?h?f?$OA?i?x?e?c?n?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP@
  00273	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0027a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0027f	8b 95 04 01 00
	00		 mov	 edx, DWORD PTR daysUntilNextBirthday$[rbp]
  00285	48 8b c8	 mov	 rcx, rax
  00288	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
  0028e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00295	48 8b c8	 mov	 rcx, rax
  00298	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 81   : 
; 82   :     return 0;

  0029e	33 c0		 xor	 eax, eax

; 83   : }

  002a0	8b f8		 mov	 edi, eax
  002a2	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  002a6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:main$rtcFrameData
  002ad	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  002b2	8b c7		 mov	 eax, edi
  002b4	48 8b 8d e0 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  002bb	48 33 cd	 xor	 rcx, rbp
  002be	e8 00 00 00 00	 call	 __security_check_cookie
  002c3	48 8d a5 f8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+504]
  002ca	5f		 pop	 rdi
  002cb	5d		 pop	 rbp
  002cc	c3		 ret	 0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\KPO\project1\1\1.cpp
;	COMDAT ?daysUntilBirthday@@YAHHHH@Z
_TEXT	SEGMENT
currentDay$ = 224
birthdayDay$ = 232
daysInYear$ = 240
?daysUntilBirthday@@YAHHHH@Z PROC			; daysUntilBirthday, COMDAT

; 38   : int daysUntilBirthday(int currentDay, int birthdayDay, int daysInYear) {

$LN5:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000d	55		 push	 rbp
  0000e	57		 push	 rdi
  0000f	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00016	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__4F7E8057_1@cpp
  00022	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 39   :     if (currentDay <= birthdayDay) {

  00027	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR birthdayDay$[rbp]
  0002d	39 85 e0 00 00
	00		 cmp	 DWORD PTR currentDay$[rbp], eax
  00033	7f 14		 jg	 SHORT $LN2@daysUntilB

; 40   :         return birthdayDay - currentDay;

  00035	8b 85 e0 00 00
	00		 mov	 eax, DWORD PTR currentDay$[rbp]
  0003b	8b 8d e8 00 00
	00		 mov	 ecx, DWORD PTR birthdayDay$[rbp]
  00041	2b c8		 sub	 ecx, eax
  00043	8b c1		 mov	 eax, ecx
  00045	eb 1c		 jmp	 SHORT $LN1@daysUntilB

; 41   :     }

  00047	eb 1a		 jmp	 SHORT $LN3@daysUntilB
$LN2@daysUntilB:

; 42   :     else {
; 43   :         return daysInYear - (currentDay - birthdayDay);

  00049	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR birthdayDay$[rbp]
  0004f	8b 8d e0 00 00
	00		 mov	 ecx, DWORD PTR currentDay$[rbp]
  00055	2b c8		 sub	 ecx, eax
  00057	8b c1		 mov	 eax, ecx
  00059	8b 8d f0 00 00
	00		 mov	 ecx, DWORD PTR daysInYear$[rbp]
  0005f	2b c8		 sub	 ecx, eax
  00061	8b c1		 mov	 eax, ecx
$LN3@daysUntilB:
$LN1@daysUntilB:

; 44   :     }
; 45   : }

  00063	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0006a	5f		 pop	 rdi
  0006b	5d		 pop	 rbp
  0006c	c3		 ret	 0
?daysUntilBirthday@@YAHHHH@Z ENDP			; daysUntilBirthday
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\KPO\project1\1\1.cpp
;	COMDAT ?dayOfYear@@YAHHHH@Z
_TEXT	SEGMENT
daysInMonth$ = 8
dayCount$ = 84
i$4 = 116
day$ = 368
month$ = 376
year$ = 384
?dayOfYear@@YAHHHH@Z PROC				; dayOfYear, COMDAT

; 23   : int dayOfYear(int day, int month, int year) {

$LN7:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000d	55		 push	 rbp
  0000e	57		 push	 rdi
  0000f	48 81 ec 78 01
	00 00		 sub	 rsp, 376		; 00000178H
  00016	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001b	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00020	b9 26 00 00 00	 mov	 ecx, 38			; 00000026H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	8b 8c 24 98 01
	00 00		 mov	 ecx, DWORD PTR [rsp+408]
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__4F7E8057_1@cpp
  0003a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 24   :     int daysInMonth[] = { 0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

  0003f	c7 45 08 00 00
	00 00		 mov	 DWORD PTR daysInMonth$[rbp], 0
  00046	c7 45 0c 1f 00
	00 00		 mov	 DWORD PTR daysInMonth$[rbp+4], 31
  0004d	c7 45 10 1c 00
	00 00		 mov	 DWORD PTR daysInMonth$[rbp+8], 28
  00054	c7 45 14 1f 00
	00 00		 mov	 DWORD PTR daysInMonth$[rbp+12], 31
  0005b	c7 45 18 1e 00
	00 00		 mov	 DWORD PTR daysInMonth$[rbp+16], 30
  00062	c7 45 1c 1f 00
	00 00		 mov	 DWORD PTR daysInMonth$[rbp+20], 31
  00069	c7 45 20 1e 00
	00 00		 mov	 DWORD PTR daysInMonth$[rbp+24], 30
  00070	c7 45 24 1f 00
	00 00		 mov	 DWORD PTR daysInMonth$[rbp+28], 31
  00077	c7 45 28 1f 00
	00 00		 mov	 DWORD PTR daysInMonth$[rbp+32], 31
  0007e	c7 45 2c 1e 00
	00 00		 mov	 DWORD PTR daysInMonth$[rbp+36], 30
  00085	c7 45 30 1f 00
	00 00		 mov	 DWORD PTR daysInMonth$[rbp+40], 31
  0008c	c7 45 34 1e 00
	00 00		 mov	 DWORD PTR daysInMonth$[rbp+44], 30
  00093	c7 45 38 1f 00
	00 00		 mov	 DWORD PTR daysInMonth$[rbp+48], 31

; 25   : 
; 26   :     int dayCount = day;

  0009a	8b 85 70 01 00
	00		 mov	 eax, DWORD PTR day$[rbp]
  000a0	89 45 54	 mov	 DWORD PTR dayCount$[rbp], eax

; 27   :     for (int i = 1; i < month; ++i) {

  000a3	c7 45 74 01 00
	00 00		 mov	 DWORD PTR i$4[rbp], 1
  000aa	eb 08		 jmp	 SHORT $LN4@dayOfYear
$LN2@dayOfYear:
  000ac	8b 45 74	 mov	 eax, DWORD PTR i$4[rbp]
  000af	ff c0		 inc	 eax
  000b1	89 45 74	 mov	 DWORD PTR i$4[rbp], eax
$LN4@dayOfYear:
  000b4	8b 85 78 01 00
	00		 mov	 eax, DWORD PTR month$[rbp]
  000ba	39 45 74	 cmp	 DWORD PTR i$4[rbp], eax
  000bd	7d 14		 jge	 SHORT $LN3@dayOfYear

; 28   :         dayCount += daysInMonth[i];

  000bf	48 63 45 74	 movsxd	 rax, DWORD PTR i$4[rbp]
  000c3	8b 44 85 08	 mov	 eax, DWORD PTR daysInMonth$[rbp+rax*4]
  000c7	8b 4d 54	 mov	 ecx, DWORD PTR dayCount$[rbp]
  000ca	03 c8		 add	 ecx, eax
  000cc	8b c1		 mov	 eax, ecx
  000ce	89 45 54	 mov	 DWORD PTR dayCount$[rbp], eax

; 29   :     }

  000d1	eb d9		 jmp	 SHORT $LN2@dayOfYear
$LN3@dayOfYear:

; 30   : 
; 31   :     if (month > 2 && isLeapYear(year)) {

  000d3	83 bd 78 01 00
	00 02		 cmp	 DWORD PTR month$[rbp], 2
  000da	7e 1a		 jle	 SHORT $LN5@dayOfYear
  000dc	8b 8d 80 01 00
	00		 mov	 ecx, DWORD PTR year$[rbp]
  000e2	e8 00 00 00 00	 call	 ?isLeapYear@@YA_NH@Z	; isLeapYear
  000e7	0f b6 c0	 movzx	 eax, al
  000ea	85 c0		 test	 eax, eax
  000ec	74 08		 je	 SHORT $LN5@dayOfYear

; 32   :         dayCount += 1;

  000ee	8b 45 54	 mov	 eax, DWORD PTR dayCount$[rbp]
  000f1	ff c0		 inc	 eax
  000f3	89 45 54	 mov	 DWORD PTR dayCount$[rbp], eax
$LN5@dayOfYear:

; 33   :     }
; 34   : 
; 35   :     return dayCount;

  000f6	8b 45 54	 mov	 eax, DWORD PTR dayCount$[rbp]

; 36   : }

  000f9	8b f8		 mov	 edi, eax
  000fb	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000ff	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?dayOfYear@@YAHHHH@Z$rtcFrameData
  00106	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0010b	8b c7		 mov	 eax, edi
  0010d	48 8d a5 58 01
	00 00		 lea	 rsp, QWORD PTR [rbp+344]
  00114	5f		 pop	 rdi
  00115	5d		 pop	 rbp
  00116	c3		 ret	 0
?dayOfYear@@YAHHHH@Z ENDP				; dayOfYear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\KPO\project1\1\1.cpp
;	COMDAT ?isValidDate@@YA_NHHH@Z
_TEXT	SEGMENT
daysInMonth$ = 8
tv77 = 260
day$ = 304
month$ = 312
year$ = 320
?isValidDate@@YA_NHHH@Z PROC				; isValidDate, COMDAT

; 9    : bool isValidDate(int day, int month, int year) {

$LN8:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000d	55		 push	 rbp
  0000e	57		 push	 rdi
  0000f	48 81 ec 38 01
	00 00		 sub	 rsp, 312		; 00000138H
  00016	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001b	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00020	b9 16 00 00 00	 mov	 ecx, 22
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	8b 8c 24 58 01
	00 00		 mov	 ecx, DWORD PTR [rsp+344]
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__4F7E8057_1@cpp
  0003a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 10   :     if (month < 1 || month > 12 || day < 1) {

  0003f	83 bd 38 01 00
	00 01		 cmp	 DWORD PTR month$[rbp], 1
  00046	7c 12		 jl	 SHORT $LN3@isValidDat
  00048	83 bd 38 01 00
	00 0c		 cmp	 DWORD PTR month$[rbp], 12
  0004f	7f 09		 jg	 SHORT $LN3@isValidDat
  00051	83 bd 30 01 00
	00 01		 cmp	 DWORD PTR day$[rbp], 1
  00058	7d 07		 jge	 SHORT $LN2@isValidDat
$LN3@isValidDat:

; 11   :         return false;

  0005a	32 c0		 xor	 al, al
  0005c	e9 ae 00 00 00	 jmp	 $LN1@isValidDat
$LN2@isValidDat:

; 12   :     }
; 13   : 
; 14   :     int daysInMonth[] = { 0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

  00061	c7 45 08 00 00
	00 00		 mov	 DWORD PTR daysInMonth$[rbp], 0
  00068	c7 45 0c 1f 00
	00 00		 mov	 DWORD PTR daysInMonth$[rbp+4], 31
  0006f	c7 45 10 1c 00
	00 00		 mov	 DWORD PTR daysInMonth$[rbp+8], 28
  00076	c7 45 14 1f 00
	00 00		 mov	 DWORD PTR daysInMonth$[rbp+12], 31
  0007d	c7 45 18 1e 00
	00 00		 mov	 DWORD PTR daysInMonth$[rbp+16], 30
  00084	c7 45 1c 1f 00
	00 00		 mov	 DWORD PTR daysInMonth$[rbp+20], 31
  0008b	c7 45 20 1e 00
	00 00		 mov	 DWORD PTR daysInMonth$[rbp+24], 30
  00092	c7 45 24 1f 00
	00 00		 mov	 DWORD PTR daysInMonth$[rbp+28], 31
  00099	c7 45 28 1f 00
	00 00		 mov	 DWORD PTR daysInMonth$[rbp+32], 31
  000a0	c7 45 2c 1e 00
	00 00		 mov	 DWORD PTR daysInMonth$[rbp+36], 30
  000a7	c7 45 30 1f 00
	00 00		 mov	 DWORD PTR daysInMonth$[rbp+40], 31
  000ae	c7 45 34 1e 00
	00 00		 mov	 DWORD PTR daysInMonth$[rbp+44], 30
  000b5	c7 45 38 1f 00
	00 00		 mov	 DWORD PTR daysInMonth$[rbp+48], 31

; 15   : 
; 16   :     if (isLeapYear(year)) {

  000bc	8b 8d 40 01 00
	00		 mov	 ecx, DWORD PTR year$[rbp]
  000c2	e8 00 00 00 00	 call	 ?isLeapYear@@YA_NH@Z	; isLeapYear
  000c7	0f b6 c0	 movzx	 eax, al
  000ca	85 c0		 test	 eax, eax
  000cc	74 11		 je	 SHORT $LN4@isValidDat

; 17   :         daysInMonth[2] = 29;

  000ce	b8 04 00 00 00	 mov	 eax, 4
  000d3	48 6b c0 02	 imul	 rax, rax, 2
  000d7	c7 44 05 08 1d
	00 00 00	 mov	 DWORD PTR daysInMonth$[rbp+rax], 29
$LN4@isValidDat:

; 18   :     }
; 19   : 
; 20   :     return day <= daysInMonth[month];

  000df	48 63 85 38 01
	00 00		 movsxd	 rax, DWORD PTR month$[rbp]
  000e6	8b 44 85 08	 mov	 eax, DWORD PTR daysInMonth$[rbp+rax*4]
  000ea	39 85 30 01 00
	00		 cmp	 DWORD PTR day$[rbp], eax
  000f0	7f 0c		 jg	 SHORT $LN6@isValidDat
  000f2	c7 85 04 01 00
	00 01 00 00 00	 mov	 DWORD PTR tv77[rbp], 1
  000fc	eb 0a		 jmp	 SHORT $LN7@isValidDat
$LN6@isValidDat:
  000fe	c7 85 04 01 00
	00 00 00 00 00	 mov	 DWORD PTR tv77[rbp], 0
$LN7@isValidDat:
  00108	0f b6 85 04 01
	00 00		 movzx	 eax, BYTE PTR tv77[rbp]
$LN1@isValidDat:

; 21   : }

  0010f	48 8b f8	 mov	 rdi, rax
  00112	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00116	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?isValidDate@@YA_NHHH@Z$rtcFrameData
  0011d	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00122	48 8b c7	 mov	 rax, rdi
  00125	48 8d a5 18 01
	00 00		 lea	 rsp, QWORD PTR [rbp+280]
  0012c	5f		 pop	 rdi
  0012d	5d		 pop	 rbp
  0012e	c3		 ret	 0
?isValidDate@@YA_NHHH@Z ENDP				; isValidDate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\KPO\project1\1\1.cpp
;	COMDAT ?isLeapYear@@YA_NH@Z
_TEXT	SEGMENT
tv70 = 192
year$ = 240
?isLeapYear@@YA_NH@Z PROC				; isLeapYear, COMDAT

; 5    : bool isLeapYear(int year) {

$LN6:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	55		 push	 rbp
  00005	57		 push	 rdi
  00006	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__4F7E8057_1@cpp
  00019	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 6    :     return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);

  0001e	8b 85 f0 00 00
	00		 mov	 eax, DWORD PTR year$[rbp]
  00024	99		 cdq
  00025	83 e2 03	 and	 edx, 3
  00028	03 c2		 add	 eax, edx
  0002a	83 e0 03	 and	 eax, 3
  0002d	2b c2		 sub	 eax, edx
  0002f	85 c0		 test	 eax, eax
  00031	75 14		 jne	 SHORT $LN3@isLeapYear
  00033	8b 85 f0 00 00
	00		 mov	 eax, DWORD PTR year$[rbp]
  00039	99		 cdq
  0003a	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0003f	f7 f9		 idiv	 ecx
  00041	8b c2		 mov	 eax, edx
  00043	85 c0		 test	 eax, eax
  00045	75 20		 jne	 SHORT $LN4@isLeapYear
$LN3@isLeapYear:
  00047	8b 85 f0 00 00
	00		 mov	 eax, DWORD PTR year$[rbp]
  0004d	99		 cdq
  0004e	b9 90 01 00 00	 mov	 ecx, 400		; 00000190H
  00053	f7 f9		 idiv	 ecx
  00055	8b c2		 mov	 eax, edx
  00057	85 c0		 test	 eax, eax
  00059	74 0c		 je	 SHORT $LN4@isLeapYear
  0005b	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv70[rbp], 0
  00065	eb 0a		 jmp	 SHORT $LN5@isLeapYear
$LN4@isLeapYear:
  00067	c7 85 c0 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv70[rbp], 1
$LN5@isLeapYear:
  00071	0f b6 85 c0 00
	00 00		 movzx	 eax, BYTE PTR tv70[rbp]

; 7    : }

  00078	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0007f	5f		 pop	 rdi
  00080	5d		 pop	 rbp
  00081	c3		 ret	 0
?isLeapYear@@YA_NH@Z ENDP				; isLeapYear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
;	COMDAT ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ PROC		; std::_Narrow_char_traits<char,int>::eof, COMDAT

; 473  :     _NODISCARD static constexpr int_type eof() noexcept {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D14739E9_xstring
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 474  :         return static_cast<int_type>(EOF);

  0001b	b8 ff ff ff ff	 mov	 eax, -1

; 475  :     }

  00020	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00027	5f		 pop	 rdi
  00028	5d		 pop	 rbp
  00029	c3		 ret	 0
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ENDP		; std::_Narrow_char_traits<char,int>::eof
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
;	COMDAT ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z
_TEXT	SEGMENT
tv65 = 192
_Left$ = 240
_Right$ = 248
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z PROC ; std::_Narrow_char_traits<char,int>::eq_int_type, COMDAT

; 465  :     _NODISCARD static constexpr bool eq_int_type(const int_type& _Left, const int_type& _Right) noexcept {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D14739E9_xstring
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 466  :         return _Left == _Right;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR _Left$[rbp]
  0002b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00032	8b 09		 mov	 ecx, DWORD PTR [rcx]
  00034	39 08		 cmp	 DWORD PTR [rax], ecx
  00036	75 0c		 jne	 SHORT $LN3@eq_int_typ
  00038	c7 85 c0 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv65[rbp], 1
  00042	eb 0a		 jmp	 SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
  00044	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv65[rbp], 0
$LN4@eq_int_typ:
  0004e	0f b6 85 c0 00
	00 00		 movzx	 eax, BYTE PTR tv65[rbp]

; 467  :     }

  00055	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0005c	5f		 pop	 rdi
  0005d	5d		 pop	 rbp
  0005e	c3		 ret	 0
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ENDP ; std::_Narrow_char_traits<char,int>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
;	COMDAT ?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z
_TEXT	SEGMENT
_First$ = 224
?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z PROC	; std::_Narrow_char_traits<char,int>::length, COMDAT

; 387  :     _NODISCARD static _CONSTEXPR17 size_t length(_In_z_ const _Elem* const _First) noexcept /* strengthened */ {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D14739E9_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 388  :         // find length of null-terminated string
; 389  : #if _HAS_CXX17
; 390  : #ifdef __cpp_char8_t
; 391  :         if constexpr (is_same_v<_Elem, char8_t>) {
; 392  : #if _HAS_U8_INTRINSICS
; 393  :             return __builtin_u8strlen(_First);
; 394  : #else // ^^^ use u8 intrinsics / no u8 intrinsics vvv
; 395  :             return _Primary_char_traits::length(_First);
; 396  : #endif // _HAS_U8_INTRINSICS
; 397  :         } else
; 398  : #endif // __cpp_char8_t
; 399  :         {
; 400  :             return __builtin_strlen(_First);
; 401  :         }
; 402  : #else // _HAS_CXX17
; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0001f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _First$[rbp]
  00026	e8 00 00 00 00	 call	 strlen

; 404  : #endif // _HAS_CXX17
; 405  :     }

  0002b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00032	5f		 pop	 rdi
  00033	5d		 pop	 rbp
  00034	c3		 ret	 0
?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ENDP	; std::_Narrow_char_traits<char,int>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\KPO\project1\1\1.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX_K@Z
_TEXT	SEGMENT
__formal$ = 224
__formal$ = 232
?__empty_global_delete@@YAXPEAX_K@Z PROC		; __empty_global_delete, COMDAT

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__4F7E8057_1@cpp
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002b	5f		 pop	 rdi
  0002c	5d		 pop	 rbp
  0002d	c3		 ret	 0
?__empty_global_delete@@YAXPEAX_K@Z ENDP		; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\KPO\project1\1\1.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX@Z
_TEXT	SEGMENT
__formal$ = 224
?__empty_global_delete@@YAXPEAX@Z PROC			; __empty_global_delete, COMDAT

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__4F7E8057_1@cpp
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00026	5f		 pop	 rdi
  00027	5d		 pop	 rbp
  00028	c3		 ret	 0
?__empty_global_delete@@YAXPEAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
